/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import evolalgo.IIndividual;
import evolalgo.problem.SpikingNeuron.SpikingNeuronPhenotype;
import evolalgo.problem.SpikingNeuron.SpikingNeuronProblem;
import evolalgo.problem.SpikingNeuron.sdm.ISDM;
import evolalgo.problem.SpikingNeuron.sdm.WaveformDistance;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import org.math.plot.Plot2DPanel;
import org.math.plot.plotObjects.BaseLabel;

/**
 *
 * @author Oddsor
 */
public class SpikeTester extends javax.swing.JFrame {

    Plot2DPanel plot;
    /**
     * Creates new form SpikeTester
     */
    public SpikeTester() {
        initComponents();
        plot = new Plot2DPanel();
        plotPanel.add(plot);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plotPanel = new javax.swing.JPanel();
        kField = new javax.swing.JTextField();
        k_up = new javax.swing.JButton();
        kDown = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dUp = new javax.swing.JButton();
        dField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dDown = new javax.swing.JButton();
        cUp = new javax.swing.JButton();
        cField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cDown = new javax.swing.JButton();
        bUp = new javax.swing.JButton();
        bField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        bDown = new javax.swing.JButton();
        aUp = new javax.swing.JButton();
        aField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        aDown = new javax.swing.JButton();
        RandomButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        plotPanel.setLayout(new java.awt.BorderLayout());

        kField.setText("-80.0");
        kField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kFieldActionPerformed(evt);
            }
        });

        k_up.setText(">");
        k_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                k_upActionPerformed(evt);
            }
        });

        kDown.setText("<");
        kDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kDownActionPerformed(evt);
            }
        });

        jLabel1.setText("K:");

        dUp.setText(">");
        dUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dUpActionPerformed(evt);
            }
        });

        dField.setText("-80.0");
        dField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("D:");

        dDown.setText("<");
        dDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dDownActionPerformed(evt);
            }
        });

        cUp.setText(">");
        cUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cUpActionPerformed(evt);
            }
        });

        cField.setText("-80.0");
        cField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("C:");

        cDown.setText("<");
        cDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cDownActionPerformed(evt);
            }
        });

        bUp.setText(">");
        bUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUpActionPerformed(evt);
            }
        });

        bField.setText("-80.0");
        bField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("B:");

        bDown.setText("<");
        bDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDownActionPerformed(evt);
            }
        });

        aUp.setText(">");
        aUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aUpActionPerformed(evt);
            }
        });

        aField.setText("-80.0");
        aField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                aFieldKeyReleased(evt);
            }
        });

        jLabel5.setText("A:");

        aDown.setText("<");
        aDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aDownActionPerformed(evt);
            }
        });

        RandomButton.setText("Random");
        RandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(kDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(k_up))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(RandomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(aDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bUp))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(plotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bUp)
                    .addComponent(bField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(bDown)
                    .addComponent(aUp)
                    .addComponent(aField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(aDown)
                    .addComponent(RandomButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(k_up)
                    .addComponent(kField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kDown)
                    .addComponent(jLabel1)
                    .addComponent(dUp)
                    .addComponent(dField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(dDown)
                    .addComponent(cUp)
                    .addComponent(cField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cDown)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private double getFieldValue(JTextField field){
        String text = field.getText();
        text = text.replace(',', '.');
        return Double.parseDouble(text);
    }
    
    private double[] getFieldValues(){
        double[] vals = new double[5];
        vals[0] = getFieldValue(aField);
        vals[1] = getFieldValue(bField);
        vals[2] = getFieldValue(cField);
        vals[3] = getFieldValue(dField);
        vals[4] = getFieldValue(kField);
        return vals;
    }
    
    private void paintPanel(double... attribs){
        ISDM sdm = new WaveformDistance();
        SpikingNeuronProblem problem = new SpikingNeuronProblem(1, sdm, false);
        List<IIndividual> pop = problem.createPopulation(1);
        IIndividual ind = pop.get(0);
        try {
            if(attribs == null || attribs.length != 5){
                problem.developPheno(pop.get(0));
            }else{
                ind.setPhenotype(new SpikingNeuronPhenotype(attribs[0], attribs[1],
                        attribs[2], attribs[3], attribs[4]));
            }
            problem.calculateFitness(pop);
        } catch (Exception ex) {
            System.out.print(ex.getMessage());
            Logger.getLogger(SpikeTester.class.getName()).log(Level.SEVERE, null, ex);
        }
        SpikingNeuronPhenotype pheno = (SpikingNeuronPhenotype) ind.phenotype();
        plot.removeAllPlots();
        plot.removeAllPlotables();
        plot.addLinePlot("Spike train", pheno.spiketrain);
        BaseLabel title = new BaseLabel(pheno.toString(), Color.BLACK, 0.5, 1.1);
        plot.addPlotable(title);
        
//        try{
//            System.out.println(plotPanel.getComponents().length);
//            plotPanel.remove(0);
//        }catch(Exception e){
//        }
//        plot.changePlotData(0, pheno.spiketrain);
//        plotPanel.add(plot);
        updateFields(pheno);
    }
    
    private void updateFields(SpikingNeuronPhenotype pheno){
        DecimalFormat df = new DecimalFormat("#.###");
        aField.setText(df.format(pheno.a));
        bField.setText(df.format(pheno.b));
        cField.setText(df.format(pheno.c));
        dField.setText(df.format(pheno.d));
        kField.setText(df.format(pheno.k));
    }
    
    private boolean fieldsOk(){
        double[] vals = getFieldValues();
        boolean ok = true;
        if (vals[0] < SpikingNeuronPhenotype.A_MIN || vals[0] > SpikingNeuronPhenotype.A_MAX) ok = false;
        if (vals[1] < SpikingNeuronPhenotype.B_MIN || vals[1] > SpikingNeuronPhenotype.B_MAX) ok = false;
        if (vals[2] < SpikingNeuronPhenotype.C_MIN || vals[2] > SpikingNeuronPhenotype.C_MAX) ok = false;
        if (vals[3] < SpikingNeuronPhenotype.C_MIN || vals[3] > SpikingNeuronPhenotype.D_MAX) ok = false;
        if (vals[4] < SpikingNeuronPhenotype.K_MIN && vals[4] > SpikingNeuronPhenotype.K_MAX) ok = false;
        
        return ok;
    }
    
    private void RandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomButtonActionPerformed
        paintPanel();
    }//GEN-LAST:event_RandomButtonActionPerformed

    private void aDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aDownActionPerformed
        double[] vals = getFieldValues();
        if (vals[0] - 0.001 >= SpikingNeuronPhenotype.A_MIN){
            vals[0] = vals[0] - 0.001;
            paintPanel(vals);
        }
    }//GEN-LAST:event_aDownActionPerformed

    private void aFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aFieldKeyReleased
        double[] vals = getFieldValues();
        if ((vals[0] >= SpikingNeuronPhenotype.A_MIN && vals[0] <= SpikingNeuronPhenotype.A_MAX)
                && fieldsOk()){
            paintPanel(getFieldValues());
        }
    }//GEN-LAST:event_aFieldKeyReleased

    private void bFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFieldActionPerformed
        double[] vals = getFieldValues();
        if ((vals[1] >= SpikingNeuronPhenotype.B_MIN && vals[1] <= SpikingNeuronPhenotype.B_MAX)
                && fieldsOk()){
            paintPanel(getFieldValues());
        }
    }//GEN-LAST:event_bFieldActionPerformed

    private void aUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aUpActionPerformed
        double[] vals = getFieldValues();
        if (vals[0] + 0.001 <= SpikingNeuronPhenotype.A_MAX){
            vals[0] = vals[0] + 0.001;
            paintPanel(vals);
        }
    }//GEN-LAST:event_aUpActionPerformed

    private void bDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDownActionPerformed
        double[] vals = getFieldValues();
        if (vals[1] - 0.01 >= SpikingNeuronPhenotype.B_MIN){
            vals[1] -= 0.01;
            paintPanel(vals);
        }
    }//GEN-LAST:event_bDownActionPerformed

    private void bUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUpActionPerformed
        double[] vals = getFieldValues();
        if (vals[1] + 0.01 <= SpikingNeuronPhenotype.B_MAX){
            vals[1] += 0.01;
            paintPanel(vals);
        }
    }//GEN-LAST:event_bUpActionPerformed

    private void cDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cDownActionPerformed
        double[] vals = getFieldValues();
        if (vals[2] - 0.5 >= SpikingNeuronPhenotype.C_MIN){
            vals[2] -= 0.5;
            paintPanel(vals);
        }
    }//GEN-LAST:event_cDownActionPerformed

    private void cUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cUpActionPerformed
        double[] vals = getFieldValues();
        if (vals[2] + 0.5 <= SpikingNeuronPhenotype.C_MAX){
            vals[2] += 0.5;
            paintPanel(vals);
        }
    }//GEN-LAST:event_cUpActionPerformed

    private void dDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dDownActionPerformed
        double[] vals = getFieldValues();
        if (vals[3] - 0.1 >= SpikingNeuronPhenotype.D_MIN){
            vals[3] -= 0.1;
            paintPanel(vals);
        }
    }//GEN-LAST:event_dDownActionPerformed

    private void dUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dUpActionPerformed
        double[] vals = getFieldValues();
        if (vals[3] + 0.1 <= SpikingNeuronPhenotype.D_MAX){
            vals[3] += 0.1;
            paintPanel(vals);
        }
    }//GEN-LAST:event_dUpActionPerformed

    private void kDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kDownActionPerformed
        double[] vals = getFieldValues();
        if (vals[4] - 0.01 >= SpikingNeuronPhenotype.K_MIN){
            vals[4] -= 0.01;
            paintPanel(vals);
        }
    }//GEN-LAST:event_kDownActionPerformed

    private void k_upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_k_upActionPerformed
        double[] vals = getFieldValues();
        if (vals[4] + 0.01 <= SpikingNeuronPhenotype.K_MAX){
            vals[4] += 0.01;
            paintPanel(vals);
        }
    }//GEN-LAST:event_k_upActionPerformed

    private void cFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cFieldActionPerformed
        double[] vals = getFieldValues();
        if ((vals[2] >= SpikingNeuronPhenotype.C_MIN && vals[2] <= SpikingNeuronPhenotype.C_MAX)
                && fieldsOk()){
            paintPanel(getFieldValues());
        }
    }//GEN-LAST:event_cFieldActionPerformed

    private void dFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dFieldActionPerformed
        double[] vals = getFieldValues();
        if ((vals[3] >= SpikingNeuronPhenotype.D_MIN && vals[3] <= SpikingNeuronPhenotype.D_MAX) &&
                fieldsOk()){
            paintPanel(getFieldValues());
        }
    }//GEN-LAST:event_dFieldActionPerformed

    private void kFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kFieldActionPerformed
        double[] vals = getFieldValues();
        if ((vals[4] >= SpikingNeuronPhenotype.K_MIN && vals[4] <= SpikingNeuronPhenotype.K_MAX)
                && fieldsOk()){
            paintPanel(getFieldValues());
        }
    }//GEN-LAST:event_kFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpikeTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpikeTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpikeTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpikeTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpikeTester().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RandomButton;
    private javax.swing.JButton aDown;
    private javax.swing.JTextField aField;
    private javax.swing.JButton aUp;
    private javax.swing.JButton bDown;
    private javax.swing.JTextField bField;
    private javax.swing.JButton bUp;
    private javax.swing.JButton cDown;
    private javax.swing.JTextField cField;
    private javax.swing.JButton cUp;
    private javax.swing.JButton dDown;
    private javax.swing.JTextField dField;
    private javax.swing.JButton dUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton kDown;
    private javax.swing.JTextField kField;
    private javax.swing.JButton k_up;
    private javax.swing.JPanel plotPanel;
    // End of variables declaration//GEN-END:variables
}
